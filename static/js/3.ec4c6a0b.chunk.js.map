{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/AddMessageForm/AddMessageForm.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","fake","props","restProps","to","module","exports","DialogItem","path","id","className","styles","dialog","src","avatar","alt","dialogName","name","Message","message","myMessage","messageTime","time","maxLengthCreator500","maxLengthCreator","AddMessageReduxForm","reduxForm","form","handleSubmit","sendMessage","onSubmit","sendMessageText","Field","component","Textarea","placeholder","wrap","validate","required","sendMessageBtn","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogsWrapper","dialogsItems","values","newMessageBody","compose","dispatch","SendMessageActionCreator"],"mappings":"2LAaIA,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAoBC,GAQhC,OADqCC,YAAiEN,EAA4B,CAACO,KAAM,cAApGD,EANwC,SAACE,GAAW,IAC/EN,EAA+BM,EAA/BN,OAAiBO,GAAcD,EAAvBD,KADsE,YAC/CC,EAD+C,oBAEpF,OAAKN,EAEE,cAACG,EAAD,eAAeI,IAFF,cAAC,IAAD,CAAUC,GAAI,gB,oBCnB1CC,EAAOC,QAAU,CAAC,OAAS,2BAA2B,WAAa,iC,oBCAnED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,UAAY,2BAA2B,SAAW,0BAA0B,YAAc,+B,oBCA/ID,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,aAAe,gC,oBCAlFD,EAAOC,QAAU,CAAC,YAAc,oCAAoC,gBAAkB,wCAAwC,eAAiB,yC,mGCehIC,EAXI,SAACL,GAChB,IAAIM,EAAO,oBAAsBN,EAAMO,GAEvC,OACI,sBAAKC,UAAWC,IAAOC,OAAvB,UACI,qBAAKC,IAAKX,EAAMY,OAAQC,IAAI,WAC5B,qBAAKL,UAAWC,IAAOK,WAAvB,SAAmC,cAAC,IAAD,CAASZ,GAAII,EAAb,SAAoBN,EAAMe,a,kBCM1DC,EAXC,SAAChB,GACb,OACI,sBAAKQ,UAA8B,qPAAlBR,EAAMiB,QAAmQR,IAAOQ,QAAUR,IAAOS,UAAlT,UACKlB,EAAMiB,QACP,qBAAKT,UAAWC,IAAOU,YAAvB,SACKnB,EAAMoB,W,sECFjBC,EAAsBC,YAAiB,KAsB9BC,EAFaC,YAA+B,CAAEC,KAAM,yBAAvCD,EAlB6C,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACxE,OACI,uBAAMlB,UAAWC,IAAOkB,YAAaC,SAAUF,EAA/C,UACI,qBAAKlB,UAAWC,IAAOoB,gBAAvB,SACI,cAACC,EAAA,EAAD,CACIf,KAAK,iBACLgB,UAAWC,IACXC,YAAY,qBACZC,KAAK,OACLC,SAAU,CAACC,IAAUf,OAE7B,qBAAKb,UAAWC,IAAO4B,eAAvB,SACI,kDCoBDC,EAxBC,SAACtC,GAEb,IAAMuC,EAAkBvC,EAAMwC,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBpC,GAAIoC,EAAEpC,GAAIQ,KAAM4B,EAAE5B,KAAMH,OAAQ+B,EAAE/B,QAAxC+B,EAAEpC,OAExEqC,EAAmB5C,EAAMwC,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBvC,GAAIuC,EAAEvC,GAAIU,QAAS6B,EAAE7B,QAASG,KAAM0B,EAAE1B,MAA5C0B,EAAEvC,OAO7E,OACI,sBAAKC,UAAWC,IAAOsC,eAAvB,UACI,qBAAKvC,UAAWC,IAAOuC,aAAvB,SACKT,IAEL,qBAAK/B,UAAWC,IAAOoC,SAAvB,SACKD,IAEL,cAAC,EAAD,CAAqBhB,SAbP,SAACqB,GACnBjD,EAAM2B,YAAYsB,EAAOC,gBACzBD,EAAOC,eAAiB,W,kBCCjBC,sBACXrD,aAnBkB,SAACL,GACnB,MAAO,CACH+C,YAAa/C,EAAM+C,gBAIF,SAACY,GACtB,MAAO,CACHzB,YAAa,SAACuB,GACVE,EAASC,YAAyBH,SAW1CtD,IAFWuD,CAGbb","file":"static/js/3.ec4c6a0b.chunk.js","sourcesContent":["import React, {ComponentType} from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { AppStateType } from \"../outside/redux-store\";\n\ntype MapStateToPropsType = {\n        isAuth: boolean\n}\n\ntype DispatchPropsType = {\n    fake: () => void\n}\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function withAuthRedirect<P>(Component: React.ComponentType<P>) {\n    const RedirectComponent: React.FC<MapStateToPropsType & DispatchPropsType> = (props) => {\n        let { isAuth, fake, ...restProps } = props\n        if (!isAuth) return <Redirect to={'/login'} />\n\n        return <Component {...restProps as P} />\n    }\n    let ConnectedAuthRedirectComponent = connect<MapStateToPropsType, DispatchPropsType, P, AppStateType>(mapStateToPropsForRedirect, {fake: () => {}})(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__jgYS8\",\"dialogName\":\"DialogItem_dialogName__1zvAh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3A57E\",\"myMessage\":\"Message_myMessage__y2Lk6\",\"messages\":\"Message_messages__1Y6WJ\",\"messageTime\":\"Message_messageTime__2c022\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__2HAky\",\"dialogsItems\":\"Dialogs_dialogsItems__26Ab9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sendMessage\":\"AddMessageForm_sendMessage__zJiK2\",\"sendMessageText\":\"AddMessageForm_sendMessageText__CmNgi\",\"sendMessageBtn\":\"AddMessageForm_sendMessageBtn__2IeQc\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styles from './DialogItem.module.css';\nimport {DialogType} from \"../../../outside/dialogs-reducer\";\n\nconst DialogItem = (props: DialogType) => {\n    let path = '/paviedamliennia/' + props.id\n\n    return (\n        <div className={styles.dialog}>\n            <img src={props.avatar} alt='dialog' />\n            <div className={styles.dialogName}><NavLink to={path}>{props.name}</NavLink></div>\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from 'react';\n\n\nimport styles from './Message.module.css';\nimport {MessageType} from '../../../outside/dialogs-reducer';\n\nconst Message = (props: MessageType) => {\n    return (\n        <div className={(props.message === 'Sir, when will you grab your head and start doing really sensible things but not this social network?I certainly understand that all great minds started with something, but you have already gone 4 dozen years.I\\'m sure great things await you') ? styles.message : styles.myMessage}>\n            {props.message}\n            <div className={styles.messageTime}>\n                {props.time}\n            </div>\n        </div>\n    )\n}\n\nexport default Message","import React from 'react'\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\n\nimport { AddMessagePropsType } from '../Dialogs'\nimport styles from './AddMessageForm.module.css';\nimport {Textarea} from \"../../Common/FormsControls/FormControl\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validatos\";\n\n\nconst maxLengthCreator500 = maxLengthCreator(500)\n\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessagePropsType>> = ({ handleSubmit }) => {\n    return (\n        <form className={styles.sendMessage} onSubmit={handleSubmit}>\n            <div className={styles.sendMessageText}>\n                <Field\n                    name='newMessageBody'\n                    component={Textarea}\n                    placeholder='Enter your message'\n                    wrap='hard'\n                    validate={[required, maxLengthCreator500]} />\n            </div>\n            <div className={styles.sendMessageBtn}>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm<AddMessagePropsType>({ form: 'dialogsAddMessageForm' })(AddMessageForm)\n\nexport default AddMessageReduxForm","import React from 'react';\n\n\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\n\nimport styles from './Dialogs.module.css';\nimport AddMessageReduxForm from './AddMessageForm/AddMessageForm';\nimport {DialogsPagePropsType} from \"../../outside/dialogs-reducer\";\n\ntype DialogsPropsType = {\n    dialogsPage: DialogsPagePropsType\n    sendMessage: (newMessageBody: string) => void\n}\n\nexport type AddMessagePropsType = {\n    newMessageBody: string\n}\n\nconst Dialogs = (props: DialogsPropsType) => {\n\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name} avatar={d.avatar} />)\n\n    const messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} id={m.id} message={m.message} time={m.time} />)\n\n    const addNewMessage = (values: AddMessagePropsType) => {\n        props.sendMessage(values.newMessageBody)\n        values.newMessageBody = \" \"\n    }\n\n    return (\n        <div className={styles.dialogsWrapper}>\n            <div className={styles.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={styles.messages}>\n                {messagesElements}\n            </div>\n            <AddMessageReduxForm onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\nexport default Dialogs","import { connect } from 'react-redux';\nimport { compose } from 'redux';\n\n\nimport Dialogs from './Dialogs';\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\nimport {ActionsType, AppStateType} from \"../../outside/redux-store\";\nimport {SendMessageActionCreator} from \"../../outside/dialogs-reducer\";\n\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch: (action: ActionsType) => void) => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(SendMessageActionCreator(newMessageBody))\n        }\n    }\n}\n\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\n\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)"],"sourceRoot":""}